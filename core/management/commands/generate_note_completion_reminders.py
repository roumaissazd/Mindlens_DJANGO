"""
Management command to generate AI-powered reminders for incomplete notes.
Usage: python manage.py generate_note_completion_reminders
"""

from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.utils import timezone
from core.models import Notification, Note
from core.ai_utils import analyze_note


class Command(BaseCommand):
    help = 'G√©n√®re des rappels IA pour chaque note non termin√©e des utilisateurs.'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('D√©marrage des rappels IA pour notes incompl√®tes...'))
        today = timezone.now().date()

        for user in User.objects.all():
            # 1. Trouver toutes les notes non termin√©es de l'utilisateur
            incomplete_notes = Note.objects.filter(user=user, is_completed=False)

            for note in incomplete_notes:
                # 2. V√©rifier si un rappel a d√©j√† √©t√© envoy√© AUJOURD'HUI pour cette note sp√©cifique
                #    C'est crucial pour ne pas spammer l'utilisateur
                reminder_already_sent = Notification.objects.filter(
                    user=user,
                    timestamp__date=today,
                    message__contains=f"rappel pour votre note : '{note.title or 'Sans titre'}'"
                ).exists()

                if reminder_already_sent:
                    continue  # Passer √† la note suivante

                # 3. Analyser le contenu de la note avec l'IA pour un message personnalis√©
                analysis = analyze_note(note.content)
                sentiment = analysis.get('sentiment', {}).get('label', 'neutre').lower() if analysis.get('sentiment') else 'neutre'

                # 4. G√©n√©rer le message de rappel personnalis√©
                message = self._generate_reminder_message(note, sentiment)

                # 5. Cr√©er la notification
                Notification.objects.create(user=user, message=message)
                self.stdout.write(self.style.SUCCESS(f'Rappel IA cr√©√© pour la note "{note.title or "Sans titre"}" de {user.username}'))

        self.stdout.write(self.style.SUCCESS('G√©n√©ration des rappels pour notes incompl√®tes termin√©e.'))

    def _generate_reminder_message(self, note, sentiment):
        """G√©n√®re un message de rappel bas√© sur le sentiment de la note."""
        title = note.title or 'Sans titre'

        if 'n√©gatif' in sentiment or 'tr√®s n√©gatif' in sentiment:
            return f"Un petit mot de soutien. Je pense √† votre note '{title}'. J'esp√®re que la situation s'est am√©lior√©e. Prenez soin de vous. üíô"
        elif 'positif' in sentiment or 'tr√®s positif' in sentiment:
            return f"Rappel pour votre note '{title}' ! C'√©tait une note positive. Avez-vous pu avancer sur ce sujet ? Continuez comme √ßa ! üòä"
        else:  # Neutre
            return f"Rappel pour votre note '{title}'. Avez-vous eu l'occasion d'y revenir ou de la cl√¥turer ? üå±"