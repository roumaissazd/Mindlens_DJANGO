from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from core.models import Notification, Note
from django.utils import timezone
from datetime import timedelta
from collections import Counter
from core.ai_utils import classify_category

class Command(BaseCommand):
    help = 'G√©n√®re des rappels quotidiens pour √©crire une note, avec contenu IA bas√© sur les cat√©gories.'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('D√©marrage de la g√©n√©ration des rappels IA quotidiens...'))
        today = timezone.now().date()

        for user in User.objects.all():
            # 1. V√©rifier si un rappel a d√©j√† √©t√© envoy√© aujourd'hui
            if Notification.objects.filter(user=user, timestamp__date=today, message__contains="Pensez √† noter").exists():
                continue

            # 2. R√©cup√©rer les 5 derni√®res notes de l'utilisateur
            recent_notes = Note.objects.filter(user=user).order_by('-created_at')[:5]
            if not recent_notes:
                continue

            # 3. Analyser les cat√©gories des notes r√©centes
            categories = []
            for note in recent_notes:
                # On utilise la cat√©gorie manuelle ou celle g√©n√©r√©e par l'IA
                category = note.category or (note.auto_tags.get('category_scores') and list(note.auto_tags['category_scores'].keys())[0])
                if category:
                    categories.append(category)
            
            # 4. Trouver la cat√©gorie la plus r√©currente
            if categories:
                most_common_category = Counter(categories).most_common(1)[0][0]
            else:
                most_common_category = 'r√©flexion' # Th√®me par d√©faut

            # 5. G√©n√©rer et sauvegarder la notification
            message = self._generate_reminder_message(most_common_category)
            Notification.objects.create(user=user, message=message)
            self.stdout.write(self.style.SUCCESS(f'Rappel IA (th√®me: {most_common_category}) cr√©√© pour {user.username}'))

        self.stdout.write(self.style.SUCCESS('G√©n√©ration des rappels IA termin√©e.'))

    def _generate_reminder_message(self, theme):
        messages = {
            'famille': "Salut ! Pensez √† capturer un pr√©cieux moment en famille aujourd'hui. Qu'avez-vous partag√© de beau ? ‚ù§Ô∏è",
            'travail': "Bonjour ! Comment s'est pass√©e votre journ√©e professionnelle ? Pensez √† noter vos r√©ussites ou vos d√©fis. üíº",
            'voyage': "Bonjour ! Que ce soit un grand voyage ou une petite escapade, notez vos souvenirs d'aventure. ‚úàÔ∏è",
            'sante': "Bonjour ! N'oubliez pas de faire le point sur votre bien-√™tre. Comment vous sentez-vous aujourd'hui ? üåø",
            'amour': "Salut ! L'amour est dans l'air. N'oubliez pas de noter ces moments sp√©ciaux. üíï",
            'loisirs': "Hello ! Un moment de d√©tente ou de loisir aujourd'hui ? C'est le parfait moment pour le noter dans votre journal. üéÆ",
            'reflexion': "Bonjour ! Prenez un instant pour la r√©flexion. Quelle pens√©e m√©rite d'√™tre not√©e aujourd'hui ? üß†",
            'autre': "Bonjour ! Pensez √† noter vos pens√©es du jour dans votre MindLense. ‚úçÔ∏è"
        }
        return messages.get(theme, "Bonjour ! Pensez √† noter vos pens√©es du jour dans votre MindLense. ‚úçÔ∏è")